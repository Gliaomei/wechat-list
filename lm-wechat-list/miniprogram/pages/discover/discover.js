"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Page({
    data: {
        dataList: [],
        windowWidth: 0,
        windowHeight: wx.getStorageSync('windowHeight'),
        imgMargin: 6,
        imgWidth: 0,
        topArr: [0, 0],
        loading: false,
    },
    onLoad: function () {
        this.getShowList();
    },
    getShowList: function () {
        var that = this;
        this.setData({ loading: true });
        wx.request({
            url: 'https://example.com/showlist',
            dataType: 'json',
            success: function (res) {
                that.setData({ loading: false });
                wx.stopPullDownRefresh();
                that.setData({ dataList: res.data.list }, function () {
                    wx.hideLoading();
                });
            }
        });
    },
    onReachBottom: function () {
        var changeList = __spreadArray([], this.data.dataList);
        var tmpArr = [];
        for (var i = 0; i < changeList.length; i++) {
            var index = parseInt(Math.random() * 100) % changeList.length;
            tmpArr.push(changeList[index]);
            changeList.splice(index, 1);
        }
        var dataList = this.data.dataList.concat(tmpArr);
        this.setData({ dataList: dataList }, function () {
            wx.hideLoading();
        });
    },
    onPullDownRefresh: function () {
        this.getShowList();
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY292ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkaXNjb3Zlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFJLENBQUM7SUFDSCxJQUFJLEVBQUU7UUFDSixRQUFRLEVBQUUsRUFBRTtRQUNaLFdBQVcsRUFBRSxDQUFDO1FBQ2QsWUFBWSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsY0FBYyxDQUFDO1FBQy9DLFNBQVMsRUFBRSxDQUFDO1FBQ1osUUFBUSxFQUFFLENBQUM7UUFDWCxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxFQUFFLEtBQUs7S0FDZjtJQUNELE1BQU0sRUFBTjtRQUNFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsV0FBVyxFQUFFO1FBQ1gsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNoQyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLDhCQUE4QjtZQUNuQyxRQUFRLEVBQUUsTUFBTTtZQUNoQixPQUFPLEVBQVAsVUFBUSxHQUFPO2dCQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDakMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUE7Z0JBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDeEMsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFBO2dCQUNsQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUM7U0FDRixDQUFDLENBQUE7SUFDSixDQUFDO0lBRUQsYUFBYSxFQUFFO1FBSWIsSUFBSSxVQUFVLHFCQUFtQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXJELElBQUksTUFBTSxHQUFlLEVBQUUsQ0FBQztRQUM1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMxQyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDckUsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUMvQixVQUFVLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUM3QjtRQUNELElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFhLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ25DLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNsQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxpQkFBaUIsRUFBRTtRQUVqQixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGxvZ3MudHNcbi8vIGNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlscy91dGlsLmpzJylcbi8vIGltcG9ydCB7IGZvcm1hdFRpbWUgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJ1xuXG4vLyAtLS0tLS0tLS0tLS0t56ys5LiA56eN5pa55rOVLS0tLS0tLS0tLS0tLVxuUGFnZSh7XG4gIGRhdGE6IHtcbiAgICBkYXRhTGlzdDogW10sIC8v5pWw5o2u5rqQXG4gICAgd2luZG93V2lkdGg6IDAsIC8v6aG16Z2i6KeG5Zu+5a695bqmXG4gICAgd2luZG93SGVpZ2h0OiB3eC5nZXRTdG9yYWdlU3luYygnd2luZG93SGVpZ2h0JyksIC8v6KeG5Zu+6auY5bqmXG4gICAgaW1nTWFyZ2luOiA2LCAvL+WbvueJh+i+uei3nTog5Y2V5L2NcHhcbiAgICBpbWdXaWR0aDogMCwgIC8v5Zu+54mH5a695bqmOiDljZXkvY1weFxuICAgIHRvcEFycjogWzAsIDBdLCAvL+WtmOWCqOavj+WIl+eahOe0r+enr3RvcFxuICAgIGxvYWRpbmc6IGZhbHNlLFxuICB9LFxuICBvbkxvYWQoKTp2b2lkIHtcbiAgICB0aGlzLmdldFNob3dMaXN0KCk7XG4gIH0sXG4gIC8vIOiOt+WPluWIl+ihqFxuICBnZXRTaG93TGlzdDogZnVuY3Rpb24oKTp2b2lkIHtcbiAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5zZXREYXRhKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgIHVybDogJ2h0dHBzOi8vZXhhbXBsZS5jb20vc2hvd2xpc3QnLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIHN1Y2Nlc3MocmVzOmFueSkge1xuICAgICAgICB0aGF0LnNldERhdGEoeyBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgd3guc3RvcFB1bGxEb3duUmVmcmVzaCgpIC8v5YGc5q2i5LiL5ouJ5Yi35pawXG4gICAgICAgIHRoYXQuc2V0RGF0YSh7IGRhdGFMaXN0OiByZXMuZGF0YS5saXN0IH0sIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgd3guaGlkZUxvYWRpbmcoKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuICAvLyDkuIrmi4nliqDovb3mm7TlpJpcbiAgb25SZWFjaEJvdHRvbTogZnVuY3Rpb24oKTp2b2lkIHtcbiAgICAvLyBpZih0aGlzLmRhdGEuZGF0YUxpc3QubGVuZ3RoID4gMzEpe1xuICAgIC8vICAgcmV0dXJuO1xuICAgIC8vIH1cbiAgICBsZXQgY2hhbmdlTGlzdDogQXJyYXk8YW55PiA9IFsuLi50aGlzLmRhdGEuZGF0YUxpc3RdO1xuXG4gICAgbGV0IHRtcEFycjogQXJyYXk8YW55PiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGluZGV4ID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDEwMCBhcyBhbnkpICUgY2hhbmdlTGlzdC5sZW5ndGg7XG4gICAgICB0bXBBcnIucHVzaChjaGFuZ2VMaXN0W2luZGV4XSk7XG4gICAgICBjaGFuZ2VMaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIGxldCBkYXRhTGlzdCA9IHRoaXMuZGF0YS5kYXRhTGlzdC5jb25jYXQodG1wQXJyIGFzIGFueSk7XG4gICAgdGhpcy5zZXREYXRhKHsgZGF0YUxpc3Q6IGRhdGFMaXN0IH0sIGZ1bmN0aW9uKCl7XG4gICAgICB3eC5oaWRlTG9hZGluZygpXG4gICAgfSk7XG4gIH0sXG4gIC8vIOS4iuaLieWIt+aWsFxuICBvblB1bGxEb3duUmVmcmVzaDogZnVuY3Rpb24oKTp2b2lkIHtcbiAgICAvLyB0aGlzLnNldERhdGEoeyBkYXRhTGlzdDogW10gfSk7XG4gICAgdGhpcy5nZXRTaG93TGlzdCgpO1xuICB9XG59KVxuXG4iXX0=